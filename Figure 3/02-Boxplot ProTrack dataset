#### Libraries ####
set.seed(123)                                                                    
library(openxlsx)                                                                
library(ggplot2) 
library("ggpubr")
library(dplyr)
library(tidyverse)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
  library(plyr)
  # New version of length which can handle NA's: if na.rm==T, don't count them
  length2 <- function (x, na.rm=FALSE) {
    if (na.rm) sum(!is.na(x))
    else       length(x)
  }
  # This does the summary. For each group's data frame, return a vector with
  # N, mean, and sd
  datac <- plyr::ddply(data, groupvars, .drop=.drop,
                 .fun = function(xx, col) {
                   c(N    = length2(xx[[col]], na.rm=na.rm),
                     mean = mean   (xx[[col]], na.rm=na.rm),
                     sd   = sd     (xx[[col]], na.rm=na.rm),
                     median = median   (xx[[col]], na.rm=na.rm) 
                   )
                 },
                 measurevar              
  )
  # Rename the "mean" column   
  datac <- plyr::rename(datac, c("mean" = measurevar))
  datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
  # Confidence interval multiplier for standard error
  # Calculate t-statistic for confidence interval:
  # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
  ciMult <- qt(conf.interval/2 + .5, datac$N-1)
  datac$ci <- datac$se * ciMult
  return(datac)
}

###########################                                                                            
#### Import data table ####
###########################
dat <- openxlsx::read.xlsx(".../Suppl. Table 9.xlsx", sheet = 1)   

###################################
#### OIS_PhosProt_UP ####
###################################
dat1 <- dat[,c(1:5)]
dat1 <- drop_na(dat1)
dat2 <- dat[,c(1:5,8)]
dat2 <- drop_na(dat2)
dat3 <- dat1 %>% filter(Broad_entity == "pLGG")
dat4 <- dat2 %>% filter(Broad_entity == "pLGG")

###Boxplot by broad entities####
pdat_summary <- summarySE(dat1, measurevar = "OIS_PhosProt_UP", groupvars = "Broad_entity") 
dat1$Broad_entity_NEW<- factor(dat1$Broad_entity, levels=c(pdat_summary[order(pdat_summary$median),"Broad_entity"]))

median_dataset <- median(dat1$OIS_PhosProt_UP)
median_pLGG <- median(dat3$OIS_PhosProt_UP)

for (i in unique(dat1$Broad_entity_NEW)) {
  dat1[dat1$Broad_entity_NEW == i, "color"] <- ifelse(median(dat1[dat1$Broad_entity_NEW == i, "OIS_PhosProt_UP"]) < median_dataset, 0,1)
}

tiff(".../OIS_PhosProt_UP.tiff", 
     width = 8, height = 7, unit = "cm", res=300)
ggplot(data = dat1, aes(x = Broad_entity_NEW, y = OIS_PhosProt_UP, fill = as.factor(color)))+  
  geom_hline(yintercept= median_dataset, linetype="dashed", color = "black", size=0.5)+
  geom_hline(yintercept= median_pLGG, linetype="dashed", color = "orange", size=0.5)+
  stat_boxplot(geom = "errorbar", width = 0.2)+
  geom_boxplot(outlier.shape = NA, aes(x = Broad_entity_NEW, y = OIS_PhosProt_UP))+
  geom_boxplot(outlier.shape = NA, data=dat1[dat1$Broad_entity_NEW=="pLGG",],
               aes(x = Broad_entity_NEW, y = OIS_PhosProt_UP),fill="orange")+                                             
  geom_jitter(position = position_jitter(width = 0.2), color = "grey", size = 0.1)+         
  labs(y= "OIS_UP_PhosProt (Arbitrary unit)", x = NULL)+
  scale_fill_manual(values = c("white", "white"))+
  scale_x_discrete(labels=c("Medulloblastoma" = "Medulloblastoma\n(n=22)",               
                            "Ependymoma" = "Ependymoma\n(n=32)",
                            "pHGG" = "pHGG\n(n=25)",
                            "ATRT" = "ATRT\n(n=12)",
                            "pLGG" = "pLGG\n(n=110)",
                            "Craniopharyngioma" = "Craniopharyngioma\n(n=16)"))+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,vjust = 01, hjust=1, size = 6),
        axis.text.y = element_text(size = 6),
        axis.title.y = element_text(size = 6))+
  guides(fill = "none")
dev.off()

aov_pdat <- aov(OIS_PhosProt_UP~Broad_entity_NEW, dat1) 
summary(aov_pdat)
Stat_summary<-TukeyHSD(aov_pdat)
Stat_summary2 <-as.data.frame(Stat_summary[[1]])
Stat_summary2[Stat_summary2$'p adj'<0.05, ]

###################################
#### OIS_Prot_UP ####
###################################
dat1 <- dat[,c(1:4,6)]
dat1 <- drop_na(dat1)
dat2 <- dat[,c(1:4,6,8)]
dat2 <- drop_na(dat2)
dat3 <- dat1 %>% filter(Broad_entity == "pLGG")
dat4 <- dat2 %>% filter(Broad_entity == "pLGG")

###Boxplot by broad entities####
pdat_summary <- summarySE(dat1, measurevar = "OIS_Prot_UP", groupvars = "Broad_entity") 
dat1$Broad_entity_NEW<- factor(dat1$Broad_entity, levels=c(pdat_summary[order(pdat_summary$median),"Broad_entity"]))

median_dataset <- median(dat1$OIS_Prot_UP)
median_pLGG <- median(dat3$OIS_Prot_UP)

for (i in unique(dat1$Broad_entity_NEW)) {
  dat1[dat1$Broad_entity_NEW == i, "color"] <- ifelse(median(dat1[dat1$Broad_entity_NEW == i, "OIS_Prot_UP"]) < median_dataset, 0,1)
}

tiff(".../OIS_Prot_UP.tiff", 
     width = 8, height = 7, unit = "cm", res=300)
ggplot(data = dat1, aes(x = Broad_entity_NEW, y = OIS_Prot_UP, fill = as.factor(color)))+  
  geom_hline(yintercept= median_dataset, linetype="dashed", color = "black", size=0.5)+
  geom_hline(yintercept= median_pLGG, linetype="dashed", color = "orange", size=0.5)+
  stat_boxplot(geom = "errorbar", width = 0.2)+
  geom_boxplot(outlier.shape = NA, aes(x = Broad_entity_NEW, y = OIS_Prot_UP))+
  geom_boxplot(outlier.shape = NA, data=dat1[dat1$Broad_entity_NEW=="pLGG",],
               aes(x = Broad_entity_NEW, y = OIS_Prot_UP),fill="orange")+                                             
  geom_jitter(position = position_jitter(width = 0.2), color = "grey", size = 0.1)+         
  labs(y= "OIS_UP_Prot (Arbitrary unit)", x = NULL)+
  scale_fill_manual(values = c("white", "white"))+
  scale_x_discrete(labels=c("Medulloblastoma" = "Medulloblastoma\n(n=22)",               
                            "Ependymoma" = "Ependymoma\n(n=32)",
                            "pHGG" = "pHGG\n(n=25)",
                            "ATRT" = "ATRT\n(n=12)",
                            "pLGG" = "pLGG\n(n=110)",
                            "Craniopharyngioma" = "Craniopharyngioma\n(n=16)"))+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,vjust = 01, hjust=1, size = 6),
        axis.text.y = element_text(size = 6),
        axis.title.y = element_text(size = 6))+
  guides(fill = "none")
dev.off()

aov_pdat <- aov(OIS_Prot_UP~Broad_entity_NEW, dat1) 
summary(aov_pdat)
Stat_summary<-TukeyHSD(aov_pdat)
Stat_summary2 <-as.data.frame(Stat_summary[[1]])
Stat_summary2[Stat_summary2$'p adj'<0.05, ]

###################################
#### OIS_RNA_UP ####
###################################
dat1 <- dat[,c(1:4,7)]
dat1 <- drop_na(dat1)
dat2 <- dat[,c(1:4,7:8)]
dat2 <- drop_na(dat2)
dat3 <- dat1 %>% filter(Broad_entity == "pLGG")
dat4 <- dat2 %>% filter(Broad_entity == "pLGG")
###Boxplot by broad entities####
pdat_summary <- summarySE(dat1, measurevar = "OIS_RNA_UP", groupvars = "Broad_entity") 
dat1$Broad_entity_NEW<- factor(dat1$Broad_entity, levels=c(pdat_summary[order(pdat_summary$median),"Broad_entity"]))

median_dataset <- median(dat1$OIS_RNA_UP)
median_pLGG <- median(dat3$OIS_RNA_UP)

for (i in unique(dat1$Broad_entity_NEW)) {
  dat1[dat1$Broad_entity_NEW == i, "color"] <- ifelse(median(dat1[dat1$Broad_entity_NEW == i, "OIS_RNA_UP"]) < median_dataset, 0,1)
}

tiff(".../OIS_RNA_UP.tiff", 
     width = 8, height = 7, unit = "cm", res=300)
ggplot(data = dat1, aes(x = Broad_entity_NEW, y = OIS_RNA_UP, fill = as.factor(color)))+  
  geom_hline(yintercept= median_dataset, linetype="dashed", color = "black", size=0.5)+
  geom_hline(yintercept= median_pLGG, linetype="dashed", color = "orange", size=0.5)+
  stat_boxplot(geom = "errorbar", width = 0.2)+
  geom_boxplot(outlier.shape = NA, aes(x = Broad_entity_NEW, y = OIS_RNA_UP))+
  geom_boxplot(outlier.shape = NA, data=dat1[dat1$Broad_entity_NEW=="pLGG",],
               aes(x = Broad_entity_NEW, y = OIS_RNA_UP),fill="orange")+                                             
  geom_jitter(position = position_jitter(width = 0.2), color = "grey", size = 0.1)+         
  labs(y= "OIS_UP_RNAseq (Arbitrary unit)", x = NULL)+
  scale_fill_manual(values = c("white", "white"))+
  scale_x_discrete(labels=c("Medulloblastoma" = "Medulloblastoma\n(n=22)",               
                            "Ependymoma" = "Ependymoma\n(n=32)",
                            "pHGG" = "pHGG\n(n=25)",
                            "ATRT" = "ATRT\n(n=12)",
                            "pLGG" = "pLGG\n(n=110)",
                            "Craniopharyngioma" = "Craniopharyngioma\n(n=16)"))+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45,vjust = 01, hjust=1, size = 6),
        axis.text.y = element_text(size = 6),
        axis.title.y = element_text(size = 6))+
  guides(fill = "none")
dev.off()

aov_pdat <- aov(OIS_RNA_UP~Broad_entity_NEW, dat1) 
summary(aov_pdat)
Stat_summary<-TukeyHSD(aov_pdat)
Stat_summary2 <-as.data.frame(Stat_summary[[1]])
Stat_summary2[Stat_summary2$'p adj'<0.05, ]

###################################
#### SUMMARY ####
###################################
dat <- openxlsx::read.xlsx(".../Suppl. Table 9.xlsx", sheet = 2)   

pdat_summary <- summarySE(dat, measurevar = "Median", groupvars = "Broad_entity") 
dat$Broad_entity_NEW<- factor(dat$Broad_entity, levels=c(pdat_summary[order(pdat_summary$median),"Broad_entity"]))

tiff(".../Summary all OMICs scores.tiff", 
     width = 8, height = 7, unit = "cm", res=300)

ggplot(data = dat, aes(x = Broad_entity_NEW, y = Median))+
  stat_boxplot(geom = "errorbar", width = 0.3)+
  geom_boxplot(outlier.shape = NA, width = 0.5)+
  geom_boxplot(outlier.shape = NA, data=dat[dat$Broad_entity_NEW=="pLGG",],
               aes(x = Broad_entity_NEW, y = Median), fill="lightgreen")+
  geom_jitter(aes(colour = Score), size = 2, position = position_jitter(width = 0.2))+
  theme(axis.text = element_text(color = "black", size = 6, angle = 45, vjust = 0.5, hjust=1),
        legend.text = element_text(size = 6),
        axis.title = element_text(size = 6))+
  scale_x_discrete(labels=c("Medulloblastoma" = "Medulloblastoma\n(n=22)",               
                            "Ependymoma" = "Ependymoma\n(n=32)",
                            "pHGG" = "pHGG\n(n=25)",
                            "ATRT" = "ATRT\n(n=12)",
                            "pLGG" = "pLGG\n(n=110)",
                            "Craniopharyngioma" = "Craniopharyngioma\n(n=16)"))+ 
  scale_color_manual(values=c("#00A1DF", "#8F1336", "#FF9012"))+
  labs(y= "Signature score (Arbitrary unit)", x = NULL)+
  guides(colour = "none", size = "none")

dev.off()
